import Adafruit_CharLCD as LCD
import time
import cv2
import numpy as np
from picamera.array import PiRGBArray
from picamera import PiCamera
from time import sleep
import RPi.GPIO as GPIO
import time

#GPIO raspberry to Arduino
GPIO.setmode(GPIO.BCM)
GPIO.setup(21, GPIO.OUT)

#camera
camera = PiCamera()
camera.resolution = (960,640)
camera.framerate = 10

# Raspberry Pi pin configuration:
lcd_rs        = 25  # Note this might need to be changed to 21 for older revision Pi's.
lcd_en        = 24
lcd_d4        = 23
lcd_d5        = 17
lcd_d6        = 18
lcd_d7        = 22
lcd_backlight = 4

# Define LCD column and row size for 16x2 LCD.
lcd_columns = 16
lcd_rows    = 2

# Initialize the LCD using the pins above.
lcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7,
                           lcd_columns, lcd_rows, lcd_backlight)

# Loop programm

while(1):
    camera.start_preview()
    sleep(0.2)
    camera.capture('/home/pi/test.png')
    camera.stop_preview()
   
    # sensor RGB
    img = cv2.imread('test.png')
    height, width = img.shape[:2]
    # Change these values to fit the size of your region of interest
    roi_size = 10 # (10x10)
    ((height-roi_size)/2,(height+roi_size)/2,(width-roi_size)/2,(width+roi_size)/2)
    roi_values = img[int((height-roi_size)/2):int((height+roi_size)/2),int((width-roi_size)/$
    mean_blue = np.mean(roi_values[:,:,0])
    mean_green = np.mean(roi_values[:,:,1])
    mean_red = np.mean(roi_values[:,:,2])
    #print consol windows
    print("B:",mean_blue,  "G:",mean_green, " R:",mean_red)

    index = int

    rgb= [mean_blue,mean_green,mean_red]
    index=(rgb.index(max(rgb)))
    print(index)

   #condition for display

    if index == 1:
        GPIO.output(21, GPIO.HIGH)
        print("herbe verte")
        # Print a two line message
        lcd.clear()
        lcd.message('herbe verte')
        time.sleep(0.1)
    else:
        GPIO.output(21, GPIO.LOW)
        print("pas herbe verte")
        lcd.clear()
        lcd.message('pas herbe verte')
        time.sleep(0.1)


